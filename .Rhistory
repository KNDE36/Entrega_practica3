x<-as.integer(x)
if ((A/B)==x) {
print("A es multiplo de B")
} else {
print("A no es multiplo de B")
}
#a)
x<-numeric()
x<-as.integer(x)
if ((A/B)==x) {
print("A es multiplo de B")
} else {
print("A no es multiplo de B")
}
rm(x)
if ((A/B)==integer) {
print("A es multiplo de B")
} else {
print("A no es multiplo de B")
}
A/B
#a)
x<-(A/B)
if (x==integer) {
print("A es multiplo de B")
} else {
print("A no es multiplo de B")
}
if (x is.integer) {
x<-(A/B)
if (is.integer(x)==TRUE) {
print("A es multiplo de B")
} else {
print("A no es multiplo de B")
}
CLASS(X)
class(x)
is.integer(x)
#a)
x<-as.integer(A/B)
if (is.integer(x)==TRUE) {
print("A es multiplo de B")
} else {
print("A no es multiplo de B")
}
#Ejercicio 5
A<-as.integer(readline("ingresar numero:"))
B<-as.integer(readline("ingresar numero:"))
x<-as.integer(A/B)
if (is.integer(x)==TRUE) {
print("A es multiplo de B")
} else {
print("A no es multiplo de B")
}
#Ejercicio 5
A<-as.integer(readline("ingresar numero:"))
B<-as.integer(readline("ingresar numero:"))
x<-as.integer(A/B)
if (is.integer(x)==TRUE) {
print("A es multiplo de B")
} else {
print("A no es multiplo de B")
}
A/B
#a)
x<-(A/B)
if (is.integer(x)==TRUE) {
print("A es multiplo de B")
} else {
print("A no es multiplo de B")
}
#Ejercicio 8
x<-1:2000
y<-substr(x,1,10)
y<-as.numeric(substr(x,1,10))
y
y<-as.numeric(substr(x,start = 1,stop = 10))
y
y<-(substr(x,start = 1,stop = 10))
`substr<-`(x,1,10)
#Ejercicio 8
x<-1:10
x<-1:10
for(i in x) {
print(i**2)
}
rm(y)
x<-1:10
for(i in x) {
s<-print(i**2)
}
s
rm(s)
x<-seq(1,1000,by=2)
x<-seq(0,1000,by=2)
x
998/2
999/2
900/2
for(i in x) {
print(i**2)
}
a<-as.numeric(readline("ingrese un numero:"))
repeat {
(X*n-((X^2)*n-a)/2X*n)
#Ejercicio 9
a<-as.numeric(readline("ingrese un numero:"))
#Ejercicio 9
a<-as.numeric(readline("ingrese un numero:"))
n<-0
repeat {
(X*n-((X^2)*n-a)/2X*n)
repeat {
(X*n-(((X^2)*n)-a)/2X*n)
repeat  {
(X*n-(((X^2)*n)-a)/2X*n)
repeat {
(X*n-(((X^2)*n)-a)/2*(X*n))
n<-n+1
if(n==1000) {
break
}
}
X<-X*n
repeat {
(X*n-(((X^2)*n)-a)/2*(X*n))
n<-n+1
if(n==1000) {
break
}
}
X<-"X"
repeat {
(X*n-(((X^2)*n)-a)/2*(X*n))
n<-n+1
if(n==1000) {
break
}
}
repeat {
(Xn-(((X^2)n)-a)/2*(Xn))
repeat {
(Xn-(((X^2)n)-a)/2*(Xn))
repeat {
(Xn-(((X^2) n)-a)/2*(Xn))
(Xn-((Xn^2)-a)/2*(Xn))
repeat {
(Xn-((Xn^2)-a)/2*(Xn))
n<-n+1
if(n==1000) {
break
}
}
X<-"Xn"
repeat {
(Xn-((Xn^2)-a)/2*(Xn))
n<-n+1
if(n==1000) {
break
}
}
X<-"X"
repeat {
(Xn-((Xn^2)-a)/2*(Xn))
n<-n+1
if(n==1000) {
break
}
}
X<-c()
repeat {
(Xn-((Xn^2)-a)/2*(Xn))
n<-n+1
if(n==1000) {
break
}
}
X<-seq(X1,Xn)
seq(x)
rm(x)
rm(X)
seq(x)
#Ejericio 2
a <− c ( 4 , −10, 7 , −2, 8 , −6, 1 , −15, 3 , −9)
#Ejericio 2
a<− c( 4 , −10, 7 , −2, 8 , −6, 1 , −15, 3 , −9)
#Ejericio 2
a<- c( 4 , −10, 7 , −2, 8 , −6, 1 , −15, 3 , −9)
#Ejericio 2
a<- c(4,-10,7,-2,8,-6,1,-15,3,-9)
i<-3
j<-5
b<-c( 1,5,7)
c<-c(TRUE, TRUE, FALSE, TRUE, FALSE, FALSE, TRUE, FALSE, FALSE, FALSE)
ii) a[i,j]
a[i,j]
a[3,5]
a[3,5]
a[seq(i, i, 2)]
a[seq(i, j, 2)]
a[seq(i, j, 3)] #2 elementos
a[c(1, 5, 7)]  #
a[b] # 3 elementos
a[c]
a[a == -4]
#Ejercicio 1
X<-c()
for (i in 1:1000) {
x<-as.numeric(readline("ingrese un numero:"))
X<-(X,x)
for (i in 1:1000) {
x<-as.numeric(readline("ingrese un numero:"))
X<-c(X,x)
}
X<-c()
for (i in 1:1000) {
x<-seq(1:1000)
X<-c(X,x)
}
#Ejercicio 1
X<-c()
for (i in 1:1000) {
x<-seq(1:1000)
X<-c(X,x)
}
#Ejercicio 1
X<-c()
for (i in 1:10) {
x<-seq(1:1000)
X<-c(X,x)
}
X<-c()
for (i in 1:10) {
x<-seq(1:100)
X<-c(X,x)
}
Matriz_X<-matrix(X,nrow = 30,ncol = 20,byrow = TRUE)
View(Matriz_X)
X<-c()
for (i in 1:1) {
x<-seq(1:1000)
X<-c(X,x)
}
X
Matriz_X<-matrix(X,nrow = 30,ncol = 20,byrow = TRUE)
View(Matriz_X)
mi_matriz<-matrix(c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25),nrow = 5,ncol = 5,byrow = TRUE)
mi_matriz
mi_matriz[3,2]
mi_matriz[seq(1,5,2),]
mi_matriz[,seq(2,5,2)]  #
mi_matriz[seq(1,5,2),seq(1,5,2)]
mi_matriz[10]
b<-c( 1,5,7)   #3 elementos
mi_matriz[b]  #
mi_matriz[3,]   #5 elementos, 1 dimension
mi_matriz[,2]   #5 elementos, 1dimension
#Ejercicio 3
A<-matrix(c(1,2,3,4,5,6),nrow = 3,ncol=3,byrow = T)
A
#Ejercicio 3
A<-matrix(c(1,2,3,4,5,6),nrow = 3,ncol=2,byrow = T)
A
#Ejercicio 3
A<-matrix(c(1,2,3,4,5,6),nrow = 2,ncol=3,byrow = T)
A
B<-matrix(c(7,8,9,10,11,12),nrow = 4,ncol=2,byrow = T)
B
B<-matrix(c(7,8,9,10,11,12),nrow = 3,ncol=2,byrow = T)
B
A*B
#Ejercicio 3
A<-matrix(c(1,2,3,4,5,6),nrow = 3,ncol=2,byrow = T)
A*B
for(i in A) {
3*A
}
for(i in A) {
c<-3*A
}
c
rm(c)
rm(i)
for(i in A) {
for(j in B) {
c<-A[i]*B[j]
}
}
for(i in A) {
for(j in B) {
c<-A*B
}
}
for(i in A) {
for(j in B) {
c<-A*B
}
}
c
A
B
B<-matrix(c(7,8,9,10,11,12),nrow = 2,ncol=3,byrow = T)
A
B
B<-matrix(c(7,8,9,10,11,12),nrow = 3,ncol=2,byrow = T)
A
B
#Ejercicio 3
A<-matrix(c(1,2,3,4),nrow = 3,ncol=2,byrow = T)
B<-matrix(c(5,6,7,8),nrow = 2,ncol=2,byrow = T)
#Ejercicio 3
A<-matrix(c(1,2,3,4),nrow = 2,ncol=2,byrow = T)
A
B
for(i in A) {
for(j in B) {
c<-(A[1,1]*B[1,1]+A[1,2]*B[2,1]+A[2,1]*B[1,2]+A[2,2]*B[2,2])
}
}
C
c
for(i in A) {
for(j in B) {
c<-(A[1,1]*B[1,1]+A[1,2]*B[2,1],A[2,1]*B[1,2]+A[2,2]*B[2,2])
for(i in A) {
for(j in B) {
c<-(A[1,1]*B[1,1]+A[1,2]*B[2,1])
d<-(A[1,1]*B[1,2]+A[1,2]*B[2,2])
e<-(A[2,1]*B[1,1]+A[2,2]*B[2,1])
f<-(A[2,1]*B[1,2]+A[2,2]*B[2,2])
}
}
H<-matrix(c(c,d,e,f),nrow = 2,ncol = 2,byrow = T)
H
A
B
W<-A%*%B
W
H
A<-matrix(c(1,2,3,4),nrow = 2,ncol=2,byrow = T)
B<-matrix(c(5,6,7,8),nrow = 2,ncol=2,byrow = T)
for(i in A){
for(j in B) {
c<-A[1,1]*B[1,1]
d<-A[1,2]*B[1,2]
e<-A[2,1]*B[2,1]
f<-A[2,2]*B[2,2]}
}
H<-matrix(c(c,d,e,f),nrow = 2,ncol = 2,byrow = T)
h
H
W<-A*B
W
source("C:/Users/cannm/OneDrive/Escritorio/LaboR_Cande/Practica_2/Parcialito_correccion.R", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
dia<-as.numeric(readline("ingrese un numero de dia:"))
rm(list = ls())
dia<-as.numeric(readline("ingrese un numero de dia:"))
repeat {
if(is.na(dia)| dia>31 | dia<0) {
print("Por_favor_ingrese_un_valor_valido:")
dia<-as.numeric(readline("ingrese un numero de dia:"))
} else if (is.na(dia)| dia<31 | dia>0) {
break
}
}
T_total<-0
Agosto<-31                                                               #AGREGAR dia i con pste para q me diga que dia estoy ingresando
for (i in 1:Agosto) {
T<-as.numeric(paste("ingrese el valor de temperatura del dia",i,":"))
repeat {
if(is.na(T)) {
print("Error_el valor no es numerico")
T<-as.numeric(readline("ingrese nuevamente el valor de temperatura del dia:"))
} else {
break
}
}
T_total<-T_total+T
if(i==dia) {
t<-T[i==dia]
}
}
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
setwd("C:/Users/cannm/OneDrive/Escritorio/LaboR_Cande/Entrega_Practica3")
aeroparque<-read.table("AEROPARQUE.txt")
azul<-read.table("AZUL.txt")
catamarca<-read.table("CATAMARCA.txt")
chilecito<-read.table("CHILECITO.txt")
iguazu<-read.table("IGUAZU.txt")
ubicacion<-read.table("estaciones.txt")
aeroparque[aeroparque==9999.9]<--NA
azul[azul==9999.9]<--NA
catamarca[catamarca==9999.9]<--NA
chilecito[chilecito==9999.9]<--NA
iguazu[iguazu==9999.9]<--NA
celsius<-function(estacion) {
C<-(estacion[,3]-32)/1.8
return(C)
}
temp_aero<-celsius(aeroparque)
temp_azul<-celsius(azul)
temp_cata<-celsius(catamarca)
temp_chilecito<-celsius(chilecito)
temp_iguazu<-celsius(iguazu)
celsius_rocio<-function(estacion){
C_rocio<-(estacion[,3]-32)/1.8
return(C_rocio)
}
temp_rocio_aero<-celsius(aeroparque)
temp_rocio_azul<-celsius(azul)
temp_rocio_cata<-celsius(catamarca)
temp_rocio_chilecito<-celsius(chilecito)
temp_rocio_iguazu<-celsius(iguazu)
Estaciones<-array(list(),dim = c(5,9))
colnames(Estaciones)<-c("Nombre","Latitud","Longitud","Altura","Codigo","Fecha","Temp","Temp Rocio","Presion")
Aeroparque<-list(ubicacion[2,1],ubicacion[2,2],ubicacion[2,3],ubicacion[2,4],aeroparque[1,1],aeroparque[,2],temp_aero,temp_rocio_aero,aeroparque[,5])
Azul<-list(ubicacion[1,1],ubicacion[1,2],ubicacion[1,3],ubicacion[1,4],azul[1,1],azul[,2],temp_azul,temp_rocio_azul,azul[,5])
Catamarca<-list(ubicacion[3,1],ubicacion[3,2],ubicacion[3,3],ubicacion[3,4],catamarca[1,1],catamarca[,2],temp_cata,temp_rocio_cata,catamarca[,5])
Chilecito<-list(ubicacion[4,1],ubicacion[4,2],ubicacion[4,3],ubicacion[4,4],chilecito[1,1],chilecito[,2],temp_chilecito,temp_rocio_chilecito,chilecito[,5])
Iguazu<-list(ubicacion[5,1],ubicacion[5,2],ubicacion[5,3],ubicacion[5,4],iguazu[1,1],iguazu[,2],temp_iguazu,temp_rocio_iguazu,iguazu[,5])
Estaciones[1,]<-Aeroparque
Estaciones[2,]<-Azul
Estaciones[3,]<-Catamarca
Estaciones[4,]<-Chilecito
Estaciones[5,]<-Iguazu
resumen_estacion<-array(list(),dim=c(5,16))
colnames(resumen_estacion)<-c("Nombre","Datos Totales","Fecha Inicial","Fecha Final","Temp Media","Desvio de Temp","Temp Minima","Temp Maxima","Temp de Rocio Media","Desvio de Temp de Rocio","Temp de Rocio Min","Temp de Rocio Max","Presion Media","Desvio de Presion","Presion Min","Presion Max")
resumen<-function(array) {
for (i in 1:nrow(array)) {
total_datos<-length(array[[i,"Fecha"]])
fecha1<-array[[i,"Fecha"]][1]
fecha2<-array[[i,"Fecha"]][total_datos]
temp_media<-mean(array[[i,"Temp"]],na.rm=T)
rocio_media<-mean(array[[i,"Temp Rocio"]],na.rm=T)
presion_media<-mean(array[[i,"Presion"]],na.rm=T)
desvio_temp<-sd(array[[i,"Temp"]],na.rm=T)
desvio_rocio<-sd(array[[i,"Temp Rocio"]],na.rm = T)
desvio_presion<-sd(array[[i,"Presion"]],na.rm=T)
max_temp<-max(array[[i,"Temp"]],na.rm=T)
max_rocio<-max(array[[i,"Temp Rocio"]],na.rm=T)
max_presion<-max(array[[i,"Presion"]],na.rm=T)
min_temp<-min(array[[i,"Temp"]],na.rm=T)
min_rocio<-min(array[[i,"Temp Rocio"]],na.rm=T)
min_presion<-min(array[[i,"Presion"]],na.rm=T)
nombre<-array[[i,"Nombre"]]
resumen_estacion[i, ]=list(nombre,total_datos,fecha1,fecha2,temp_media,desvio_temp,min_temp,max_temp,rocio_media,desvio_rocio,min_rocio,max_rocio,presion_media,desvio_presion,min_presion,max_presion)
}
return(resumen_estacion)
}
Resumen_Estaciones
Resumen_Estaciones<-resumen(Estaciones)
Resumen_Estaciones
regiones<-list()
region<-function(array,lat_min,lat_max,long_min,long_max) {
for (i in 1:nrow(array)) {
if(array[[i,"Latitud"]] > lat_min &
array[[i,"Latitud"]] < lat_max &
array[[i,"Longitud"]] > long_min &
array[[i,"Longitud"]] < long_max )
regiones[i]<-array[[i,1]]
else {
print("No hay estaciones cercanas")
}
}
return(regiones)
}
R1<-region(Estaciones,-30,-25,-70,-50)   #algunas estaciones no cumplen
R2<-region(Estaciones,-40,0,-70,0)       #todas las estaciones cumplen
#Otra forma,ver por pantalla directamente
region(Estaciones,-30,-25,-70,-50)
region(Estaciones,-40,0,-70,0)
View(R2)
Rdata<-function(a) {
save<-save(a)
return(save)
}
Rdata(Estaciones)
Rdata<-function(a,nombre) {
save<-save(a,file = (nombre))
return(save)
}
Rdata(Estaciones,datos_estaciones)
Rdata(Estaciones,"datos_estaciones")
Rdata<-function(a,nombre) {
save<-save(a,file = (nombre))
return(save)
}
Rdata(Estaciones,"datos_estaciones")
Rdata<-function(a,nombre) {
save<-save(a,file = "(nombre)")
return(save)
}
Rdata(Estaciones,"datos_estaciones")
Rdata<-function(a) {
save<-save(a,file = "")
return(save)
}
Rdata(Estaciones,"datos_estaciones")
Rdata(Estaciones)
Rdata<-function(a) {
save<-save(a)
return(save)
}
Rdata(Estaciones)
source("C:/Users/cannm/OneDrive/Escritorio/LaboR_Cande/Entrega_Practica3/entregaP3.R", echo=TRUE)
